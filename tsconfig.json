{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Language and Environment */
    "target": "esnext",
    /* Specify what JSX code is generated. */
    "jsx": "react-jsx",
    /* Modules */
    "module": "esnext",
    /* Specify what module code is generated. */
    /* Specify how TypeScript looks up a file from a given module specifier. */
    "moduleResolution": "node",
    /* Allow accessing UMD globals from modules. */
    "allowUmdGlobalAccess": false,
    /* Enable importing .json files. */
    "resolveJsonModule": true,
    /* Emit */
    /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declaration": true,
    /* Create source map files for emitted JavaScript files. */
    "sourceMap": true,
    /* Specify an output folder for all emitted files. */
    "outDir": "dist",
    /* Interop Constraints */
    /* Allow 'import x from y' when a module doesn't have a default export. */
    "allowSyntheticDefaultImports": true,
    /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "esModuleInterop": true,
    /* Ensure that casing is correct in imports. */
    "forceConsistentCasingInFileNames": true,
    /* Type Checking */
    /* Enable all strict type-checking options. */
    "strict": true,
    /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noImplicitAny": true,
    /* Enable error reporting when 'this' is given the type 'any'. */
    "noImplicitThis": true,
    /* Ensure 'use strict' is always emitted. */
    "alwaysStrict": true,
    /* Enable error reporting when local variables aren't read. */
    "noUnusedLocals": true,
    /* Raise an error when a function parameter isn't read. */
    "noUnusedParameters": true,
    /* Interpret optional property types as written, rather than adding 'undefined'. */
    "exactOptionalPropertyTypes": true,
    /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noImplicitReturns": true,
    /* Enable error reporting for fallthrough cases in switch statements. */
    "noFallthroughCasesInSwitch": true,
    /* Add 'undefined' to a type when accessed using an index. */
    "noUncheckedIndexedAccess": true,
    /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noImplicitOverride": true,
    /* Enforces using indexed accessors for keys declared using an indexed type. */
    "noPropertyAccessFromIndexSignature": true,
    /* Enable error reporting for unused labels. */
    "allowUnusedLabels": false,
    /* Enable error reporting for unreachable code. */
    "allowUnreachableCode": false,
    /* Completeness */
    "lib": [
      "dom"
    ],
    /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipDefaultLibCheck": true,
    /* Skip type checking all .d.ts files. */
    "skipLibCheck": true
  },
  "include": [
    "src"
  ],
  "exclude": [
    "node_modules",
    "src/**/*.test.ts"
  ]
}
